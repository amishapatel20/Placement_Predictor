# -*- coding: utf-8 -*-
"""Placement_Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T_ax9JA11MXRCqJFG0ncLT0nnA70LS7O
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

df = pd.read_csv('/content/placementdata.csv')

df

df.info()

df.drop(columns=['StudentID'], inplace=True)

df

df["ExtracurricularActivities"] = df["ExtracurricularActivities"].map({"Yes": 1, "No": 0})
df["PlacementTraining"] = df["PlacementTraining"].map({"Yes": 1, "No": 0})
df["PlacementStatus"] = df["PlacementStatus"].map({"Placed": 1, "NotPlaced": 0})

df

df.isnull().sum()

# Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation with Placement Status")
plt.show()

X = df.drop("PlacementStatus", axis=1)
y = df["PlacementStatus"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)#Phle samjhega data me kya hai then transform kar dega.
X_test_scaled = scaler.transform(X_test)

X_train_scaled

"""# Model Training"""

log_model = LogisticRegression()
log_model.fit(X_train_scaled, y_train)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

"""# Model Evaluation"""

log_preds = log_model.predict(X_test_scaled)
rf_preds = rf_model.predict(X_test)

accuracy_score(y_test,log_preds)

print("\nüìä Logistic Regression Classification Report:\n")
print(classification_report(y_test, log_preds))

print("üìä Random Forest Classification Report:\n")
print(classification_report(y_test, rf_preds))

cm = confusion_matrix(y_test, rf_preds)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix - Random Forest")
plt.show()

feature_importance = pd.Series(rf_model.feature_importances_, index=X.columns)
feature_importance.sort_values().plot(kind='barh', figsize=(10, 6), color='green')
plt.title("Feature Importance (Random Forest)")
plt.xlabel("Importance Score")
plt.show()

from mlxtend.plotting import plot_decision_regions

clf = LogisticRegression()
clf.fit(X_train_scaled, y_train)

# Evaluate Random Forest Model
rf_accuracy = accuracy_score(y_test, rf_preds)
print(f"Random Forest Accuracy: {rf_accuracy:.4f}")

print("\nüìä Random Forest Classification Report:\n")
print(classification_report(y_test, rf_preds))

cm_rf = confusion_matrix(y_test, rf_preds)
sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix - Random Forest")
plt.show()

import pickle

pickle.dump(clf,open('model.pkl','wb'))

!pip install gradio

import pickle
import numpy as np

# Load your trained model
clf = pickle.load(open("model.pkl", "rb"))

X = df.drop("PlacementStatus", axis=1)

print(X.columns.tolist())

import pickle
import numpy as np
import gradio as gr

# Load your model
clf = pickle.load(open("model.pkl", "rb"))

# Prediction function
def predict_placement(cgpa, internships, projects, certifications, aptitude,
                      softskills, extracurricular, training, ssc, hsc):

    # Convert radio buttons to binary
    extracurricular = 1 if extracurricular == "Yes" else 0
    training = 1 if training == "Yes" else 0

    # Arrange inputs in correct order
    input_data = np.array([[cgpa, internships, projects, certifications,
                            aptitude, softskills,
                            extracurricular, training,
                            ssc, hsc]])

    # Predict using the model
    prediction = clf.predict(input_data)[0]

    return "‚úÖ Placed" if prediction == 1 else "‚ùå Not Placed"

# Create Gradio UI
iface = gr.Interface(
    fn=predict_placement,
    inputs=[
        gr.Slider(0.0, 10.0, step=0.1, label="CGPA"),
        gr.Number(label="Number of Internships"),
        gr.Number(label="Number of Projects"),
        gr.Number(label="Workshops/Certifications Attended"),
        gr.Slider(0, 100, label="Aptitude Test Score"),
        gr.Slider(1, 10, label="Soft Skills Rating"),
        gr.Radio(["Yes", "No"], label="Extracurricular Activities"),
        gr.Radio(["Yes", "No"], label="Placement Training"),
        gr.Slider(0, 100, label="SSC Marks (%)"),
        gr.Slider(0, 100, label="HSC Marks (%)")
    ],
    outputs="text",
    title="üéì Placement Prediction App",
    description="Fill in the student's profile to predict placement outcome."
)

# Launch app
iface.launch()

